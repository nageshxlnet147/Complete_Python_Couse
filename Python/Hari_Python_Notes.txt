::::Intro to Programming with Python::::
============================================================================================
1. Software: Software is a set of instructions to the hardware.
2. Programming: Programming means writing the instructions to create a software.
3. Program: A program is a sequence of instructions given to a computer.
4. Code: The instructions that we write to create software is called Code.
5. Syntax: Similar to Grammar rules in English, Hindi, each programming language has a unique set of rules. These rules are called the Syntax of a Programming Language.
-----------------------------------------------------------------------------------------
5. Why Python?:
	Python is an easy to learn, powerful programming language.
	With Python, it is possible to create programs with minimal amount of code.
	Look at the code in Java and Python used for printing the message "Hello World"
	print("Hello World")
-------------------------------------------------------------------------------------------
6. Applications of Python:
	Python is a versatile language which has applications in almost every field:
		• Artificial intelligence (AI)
		• Machine Learning (ML)
		• Big Data
		• Smart Devices/Internet of Things (IoT)
		• Cyber Security
		• Game Development
		• Backend Development, etc.
---------------------------------------------------------------------------------
7. Career Opportunities: 
	Python developers have plenty of opportunities across the world:
		• DevOps Engineer
		• Software Developer
		• Data Analyst
		• Data Scientist
		• Machine Learning (ML) Engineer
		• AI Scientist, etc.
--------------------------------------------------------------------------------
#Day0:

Difference b/w C, Java, Python:

1. C:
	1. 1st we need to compile the code
	2. After complied its create a another file related to byte code of the same write code 
	3. By using GCC system can convert the normal code to byte code, this bytecode machine can only understand 
	4. Then we need to execute the byte code and we can view the output on the console.
	5. But this byte code file doesn't work in other systems because its create based on their present pc not for all other pc's.
	6. Because of this process called as procedural oriented Programming.
	7. So c is platform specific.

2. Java:
	1. 1st we need to compile the code
	2. After complied its create a another file related to byte code of the same write code 
	3. By using JVM system can convert the normal code to byte code, this bytecode machine can only understand 
	4. Then automatically execute the byte code and we can view the output on the console.
	5. But this byte code file can work in other systems because its create based on their JVM on pc,so JVM can same for all pc's.
	6. Because of this process called as procedural oriented/object oriented Programming.
	7. So Java is platform unaffected.

3. Python:
	1. 1st we need to compile the code
	2. After interpreted its create a another file inside the python virtual machine related to byte code of the same written code.
	3. By using INTERPRETER system can convert the normal code to byte code, this bytecode machine can only understand 
	4. Then automatically execute the byte code and we can view the output on the console.
	5. But this byte code file can work in other systems because its create based on their INTERPRETER on pc,so INTERPRETER can same for all pc's.
	6. Because of this process called as object oriented Programming.
	7. So Python is platform independent.

4. Difference between Static & Dynamic type:
	1. Static: a. we need to define the variable data types.
			   b. First the code was converted to the byte code and create a another file then execute the byte code file and produce the output.
			   c. Ex: C, C++, Java, etc......

	2. Dynamic: a. we don't need to define variable data types, the code interpreter can identify and work on output.
				b. Because of this one fo the reason python was slow compare to other programming languages.
				c. But python also convert byte code but its doesn't create the byte code file at any were.
--------------------------------------------------------------------------------------------------------------------
#Day1:

1. Comments:
		1. # (Comments the every single line)
		2. """ enter """ (If it's not assigned to any variables means then it's consider as multi -line Comments)
		3. # (multiple lines on single way Comments: ctrl+question mark)
2. Variable: 
		1. Variables are like containers for storing values.
		2. Values in the variables can be changed.
		3. A variable gets created when you assign a value to it for the first time.
3. Values: Consider that variables are like containers for storing information. In context of programming, this information is often referred to as value.
4. Data Types:
		1. Numerical data types:
			a. Integer - int : Ex = 1, 3, 5, etc....
			b. Floating - float : Ex = 1.2, 2.3, 4.5, etc....
			c. complex - integer + integerj or integerj  (vise versa also possible): Ex = 1+2j, 2+5j, 4+7j, etc.... 
		2. Boolean - Ex = True, False (We can call as keywords)
		3. Set - {} : Ex = {1,3,5,6}, {'e','t','u'}, etc....
			a. Set is the collection of the unordered items.
			b. Each element in the set must be unique.
			c. Sets are Immutable, and the sets remove the duplicate elements.
			d. Sets are mutable which means we can modify it after its creation.
		4. Dictionary - { key:value, key1:value1, } : Ex = name:'nagesh', id=147, etc....
			a. The data is stored as key-value pairs.
			b. This data structure is mutable.
			c. The components of dictionary were made using keys and values.
			d. Keys must only have one component.
			e. Values can be of any type, including integer, list, and tuple.
		5. Sequence
			a. List - [] : Ex = [2,4,6], ['e','t','y','u'], etc....
			b. Tuple - () : Ex = (1,2,4,5), ('t','y','u'), etc...
			c. String - "" or '' : Ex: "nagesh", 'roona', etc.....

5. Type of Data:
		1. type(data or variable name) - (check the which type of data is)
---------------------------------------------------------------------------------------------------
#Day2:

1. Sequence:
	1. List: Explained everything in day1 & code2.py file.
	2. Tuple: Explained everything in day1 & code3.py file.
	3. String: Explained everything in day1 & code1.py file.

2. ASCII (code6.py file): (American Standard Code for Information Interchange)
	1. ord(' '): we can identify the ASCII code for the given value to ord('any value')
	2. print(ord('4')) = 52

		Dec  Char                         Dec  Char     Dec  Char     Dec  Char
		---------                           ---------     ---------     ----------
		0  NUL (null)                      32  SPACE     64  @         96  `
		1  SOH (start of heading)          33  !         65  A         97  a
		2  STX (start of text)             34  "         66  B         98  b
		3  ETX (end of text)               35  #         67  C         99  c
		4  EOT (end of transmission)       36  $         68  D        100  d
		5  ENQ (enquiry)                   37  %         69  E        101  e
		6  ACK (acknowledge)               38  &         70  F        102  f
		7  BEL (bell)                      39  '         71  G        103  g
		8  BS  (backspace)                 40  (         72  H        104  h
		9  TAB (horizontal tab)            41  )         73  I        105  i
		10  LF  (NL line feed, new line)    42  *         74  J        106  j
		11  VT  (vertical tab)              43  +         75  K        107  k
		12  FF  (NP form feed, new page)    44  ,         76  L        108  l
		13  CR  (carriage return)           45  -         77  M        109  m
		14  SO  (shift out)                 46  .         78  N        110  n
		15  SI  (shift in)                  47  /         79  O        111  o
		16  DLE (data link escape)          48  0         80  P        112  p
		17  DC1 (device control 1)          49  1         81  Q        113  q
		18  DC2 (device control 2)          50  2         82  R        114  r
		19  DC3 (device control 3)          51  3         83  S        115  s
		20  DC4 (device control 4)          52  4         84  T        116  t
		21  NAK (negative acknowledge)      53  5         85  U        117  u
		22  SYN (synchronous idle)          54  6         86  V        118  v
		23  ETB (end of trans. block)       55  7         87  W        119  w
		24  CAN (cancel)                    56  8         88  X        120  x
		25  EM  (end of medium)             57  9         89  Y        121  y
		26  SUB (substitute)                58  :         90  Z        122  z
		27  ESC (escape)                    59  ;         91  [        123  {
		28  FS  (file separator)            60  <         92  \        124  |
		29  GS  (group separator)           61  =         93  ]        125  }
		30  RS  (record separator)          62  >         94  ^        126  ~
		31  US  (unit separator)            63  ?         95  _        127  DEL

3. Binary number find out (code6.py file).
	1. bin(any value): we can find out the Binary code for any value.
	2. print(bin(52)) =  0b110100

4. Operators (code7.py file):
	1. Arithmetic:
		a. +: Addition 
		b. -: Subtraction
		c. *: Multiplication
		d. /: Division (Reminder) (In python we received the output as floating value)
		e. %: Modulo (Quotient)
		f. **: Exponential (Power)
		g. //: integer values as output

	2. Relational or conditional (code8.py file):
		a. <: Less than
		b. >: Greater than
		c. <= Less than or equal to
		d. >= Gr than or equal to
		e. == Equal to
		f. != Not equal to
--------------------------------------------------------------------------------------------------
#Day3: 

1 . Assignment Operator (code9.py file):
		a. =
		b. +=
		c. -=
		d. *=
		e. **=
		f. //*
		g. /=
		h. %=

2. Bitwise (code10.py file)
		# Bitwise and, or, complement, xor, left shift, right shift
		a. AND Logic (&) - Logic Gates:
		    X & Y -> O
			0   0    0
			0   1    0
			1   0    0
			1   1    1

		b. OR Logic Gate (|):
		  	X | Y -> O
		  	0   0    0
		  	0   1    1
		  	1   0    1
		  	1   1    1

		c. NOT Gate (~):
			 X ~ O
			 0    1
			 1    0

		d. XOR Gate (^):
			 X ^ Y -> O
			 0   0    0
			 0   1    1
			 1   0    1
			 1   1    0

		e. Left Shift (<<): Least significant to most significant conversion.
			a << 1:
				  168 4 2 1
			7 6 5 4 3 2 1 0
			0 0 0 1 0 1 0 0

		f. Right shift (>>): Most significant to least significant conversion.
			a >> 2:
				  168 4 2 1
			7 6 5 4 3 2 1 0
			0 0 0 0 1 0 1 0 

3. Logical (code11.py file):
		a. AND
		b. OR
		c. NOT
4. Membership (Code12.py file):
		a. in
		b. not in
5. Identity (Code12.py file):
		a. is
		b. is not
-----------------------------------------------------------------------------------------------------
#Day4:

1. Operator precedence & Associativity (code13.py file)  :
	1. Operator: which perform some operation in Operand, Operand: Input values
	2. Unary Operator (+, -, True, False):  takes one operand and produces one result.
		a. EX: not True, not False, +, -
			Positive: (+)
			Negative: (-)
			Increment: (++)
			Decrement: (--
			Logical NOT: (!)
			Bitwise NOT: (~)
			Address of: (&)
			Dereference: (*)
			sizeof
	3. Binary Operator: that takes two operands and returns a single value. 
		a. Ex: 1+2, 3-4,....etc.... 
			Arithmetic operators: +, -, *, /, //, %, ** 
			Logical operators: and, or, not 
			Bitwise operators: &, |, ^, ~, <<, >>
	4. Ternary Operator:  determines if a condition is true or false and then returns the appropriate value in accordance with the result.
		b. Ex:  [on_true] if [expression] else [on_false]
|------------------------------------------------------------------------------------------------------------------------------|
| Precedence	        Operators	                        Description	                        Associativity                                                              |
|------------------------------------------------------------------------------------------------------------------------------|
| 1	                        ()	                            Parentheses	                        Left to right                                                                              |
|------------------------------------------------------------------------------------------------------------------------------|
| 2	                x[index], x[index:index]	            Subscription, slicing	            Left to right                                              |
|------------------------------------------------------------------------------------------------------------------------------|
| 3	                        await x	                        Await expression	                    N/A                                                                              |
|------------------------------------------------------------------------------------------------------------------------------|
| 4	                        **	                            Exponentiation	                    Right to left                                                                           |
|------------------------------------------------------------------------------------------------------------------------------|
| 5	                    +x, -x, ~x	                        Positive, negative,bitwise NOT	    Right to left                                                  |
|------------------------------------------------------------------------------------------------------------------------------|
| 6	                    *,@,/,//,%	  Multiplication,matrix,division,floor division,remainder	Left to right                  |
|------------------------------------------------------------------------------------------------------------------------------|
| 7	                        +, –	                        Addition and subtraction	        Left to right                                                               |
|------------------------------------------------------------------------------------------------------------------------------|
| 8	                        <<, >>	                        Shifts	                            Left to right                                                                               |
|------------------------------------------------------------------------------------------------------------------------------|
| 9	                            &	                        Bitwise AND	                        Left to right                                                                               |
|------------------------------------------------------------------------------------------------------------------------------|
| 10	                        ^	                        Bitwise XOR	                        Left to right                                                                              |
|------------------------------------------------------------------------------------------------------------------------------|
| 11	                        |	                        Bitwise OR	                        Left to right                                                                               |
|------------------------------------------------------------------------------------------------------------------------------|
| 12	     in,not in,is,is not,<,<=,>,>=,!=,==	Comparisons,membership tests,identity tests	Left to Right 				   |
|------------------------------------------------------------------------------------------------------------------------------|
| 13	                      not x	                        Boolean NOT	                        Right to left                                                                          |
|------------------------------------------------------------------------------------------------------------------------------|
| 14	                      and	                        Boolean AND	                        Left to right                                                                            |
|------------------------------------------------------------------------------------------------------------------------------|
| 15	                        or	                        Boolean OR	                        Left to right                                                                              |
|------------------------------------------------------------------------------------------------------------------------------|
| 16	                    if-else	                        Conditional expression	            Right to left                                                             |
|------------------------------------------------------------------------------------------------------------------------------|
| 17	                    lambda	                        Lambda expression	                N/A                                                                             |
|------------------------------------------------------------------------------------------------------------------------------|
| 18	                    :=	                   Assignment expression (walrus operator)	    Right to left                                                 |
|------------------------------------------------------------------------------------------------------------------------------|

2. List [] (code14.py file):
	1. Indexing representation:
		a. list creation: value_list = [ 1, 2, 3, 4, 5, 1.2, "python", [1, 2, 3] ]
		b. List Accessing:
			| index     |  Value 	|
			|------------------------
			| 	0    ->   1      |
			|------------------------
			| 	1    ->   2      |
			|------------------------
			| 	2    ->   3   	 |
			|------------------------
			| 	3    ->   4   	 |
			|------------------------
			| 	4    ->   5  	 |
			|------------------------
			| 	5    ->   1.2 	 |
			|------------------------
	2. List operations:
		a. Repetition (*): we can create multiple list by using *. 
		b. Concatenation (+): we can combine the more than 2 list.
		c. Length (len) : we can find out the length of the list.
		d. Iteration: we can Iteration the list.
		e. Membership (in): we can find the particular values in the list.
	3. List Inbuilt functions: By using this we can modify/create/update....etc...
		a. append(): we can add the new value at the end of the list.
		b. Extend (): We can extend the already existing list add a new items.
		c. copy(): It will create the shadow of the other list.
--------------------------------------------------------------------------------------------------------------------
#Day5:
		d. remove(): its remove the whatever number u want in the list and mention same.
		e. clear(): its clear the all the data in the list and provide the empty list as output.
		f. insert(): its will inserted the value in which ever place you want and give it same (need two aruguments).
		g. pop(): its deleting last item in the list and also we can delete which index item we need.
		h. reverse(): its will reverse the list as output.
		i. sort(): its will sort the ascending order as output.
		j. sorted(): that builds a new sorted list from an iterable.
		k. count(): count the which items is repeated in the list.
		l. index(): find the index position if the particular item in the list.
	1. slicing: we can divide list in parts.we can work with Positive side and Negative side as well.
		a. Syntax: Positive side: variable_name[start vale: end value] or variable_name[start vale: end value: step count] // Negative side: variable_name[end value : start vale] or variable_name[end value : start vale: step count] 
			Ex: [2:6] or [2:6:2] // [-6:-2] or [-6:-2:2]
	2. Tuple () (code15.py file):
		a. count(): count the which items is repeated in the list.
		b. index(): find the index position if the particular item in the list.
---------------------------------------------------------------------------------------------------------------------
#Day6:

1. if __name__ == '__main__': (code16.py file) :
	a. __name__ : It is an variable and it's print the __main__ as a file name of the executed one. its produce the output in same file only but not other.
	b. __main__ : its mapping with the variable of __name__.
---------------------------------------------------------------------------------------------------------------------
#Day7:

1. String (code17.py file):
	a. It is a group of characters.
	b. Escaping operations: \', \", \n: next line, \t: tab space.....etc
	c. f-String:  Syntax: f"{}", It provides a concise and intuitive way to embed expressions and variables directly into strings. The idea behind f-strings is to make string interpolation simpler.
	d. str.formate(): Syntax: { }.format(value), String format() function has been introduced for handling complex string formatting more efficiently. Sometimes we want to make generalized print statements in that case instead of writing print statements every time we use the concept of formatting.
	e. capitalize(): In the string starting character got capitalized.
	f. title(): In the string starting of the every word character got capitalized.
	g. upper(): In the string all character got capitalized.
	h. lower(): In the string all character got normal.
	i. isalnum(): If the string is combination of both number&alphabets without any spaces in between.
	j. isalpha(): If the complete string alphabets without numbers & spaces in between.
	k. isdigit(): If the complete string numbers without string & spaces in between.
	l. len(): we can find out the length of the string (like how many characters in the string & numbers as well)
	m. endswith(".extension name"): we can find out the extension of any formate.
	n. slicing[]: we can divide string in parts.we can work with Positive side and Negative side as well.

2. set{} (code18.py file):
	a. set does't allow duplicates. we can mention empty set is n = set().
	b. add(): we can add the values in the exiting set .
	c. update(): we can update the exiting set by giving multiple values at a time.
	d. remove(): we can remove the values in the set.
-----------------------------------------------------------------------------------------------------------------
#Day8:
	
	e. set maths operations:
		a. Difference(): we can find out the Difference values in sets. we use -ve symbol or difference() to perform the operations.
		b. intersection(): we can find out the common values in sets without duplicates. we use & symbol or intersection() to perform the operations.
		c. union(): we can find out set of values in sets without duplicates. we use | symbol or union() to perform the operations.
		d. symmetric_difference(): we can find out set of unique values in sets without duplicates. we use ^ symbol or symmetric_difference() to perform the operations.

3. Dictionary{keys:values} (code19.py file):
	a. The data is stored as key-value pairs. we can mention empty dictionary is n = dict() or {}.
	b. we can access the values by using keys.
	c. we can modify the values by Accessing keys.
	d. get(arg1, arg2): We can access the key values if its exist in the dictionary otherwise we will get arg2 is output.
	e. keys(): we can access the keys values.
	f. values():  we can access the values keys.
	g. clear(): we can clear the entire data in the dictionary.

4. Conditional statements (code20.py file): Conditional Statement allows you to execute a block of code only when a specific condition is true.
	1. if:	if condition: 
				output
	2. if else: if condition: 
					output
				else:
					output
	3. Nested if:	if condition:
						output
						if condition:
							output
						if condition:
							output
					else:
						output
	4. else if: 
					if condition:
						output
					elif condition:
						output
					elif condition:
						output
					else:
						output
	5. Nested else if:
					if condition:
						output
					elif condition:
						output
						elif condition:
							output
					else:
						output
5. Indentation (space):
	a. Space(s) in front of the conditional block is called indentation.
	b. Indentation(spacing) is used to identify Conditional Block.
	c. Standard practice is to use four spaces for indentation.
6. Loops: Loops allow us to execute a block of code several times.
	1. while loop: Allows us to execute a block of code several times as long as the condition is True.
				while condition:
					output
					Increment value
--------------------------------------------------------------------------------------------------------------------

				







